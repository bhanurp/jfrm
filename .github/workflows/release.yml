name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Verify Go setup
        run: |
          go version
          go env
          
      - name: Download dependencies
        run: go mod download
          
      - name: Build for multiple platforms
        run: |
          echo "Building for multiple platforms..."
          GOOS=darwin GOARCH=amd64 go build -o jfrm_darwin_amd64 ./cmd/jfrm
          GOOS=darwin GOARCH=arm64 go build -o jfrm_darwin_arm64 ./cmd/jfrm
          GOOS=linux GOARCH=amd64 go build -o jfrm_linux_amd64 ./cmd/jfrm
          GOOS=linux GOARCH=arm64 go build -o jfrm_linux_arm64 ./cmd/jfrm
          GOOS=windows GOARCH=amd64 go build -o jfrm_windows_amd64.exe ./cmd/jfrm
          
          echo "Build completed. Checking files:"
          ls -la jfrm_*
          
      - name: Create release assets
        run: |
          echo "Creating release assets..."
          tar -czf jfrm_darwin_amd64.tar.gz jfrm_darwin_amd64
          tar -czf jfrm_darwin_arm64.tar.gz jfrm_darwin_arm64
          tar -czf jfrm_linux_amd64.tar.gz jfrm_linux_amd64
          tar -czf jfrm_linux_arm64.tar.gz jfrm_linux_arm64
          zip jfrm_windows_amd64.zip jfrm_windows_amd64.exe
          
          echo "Assets created. Checking files:"
          ls -la *.tar.gz *.zip
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            jfrm_darwin_amd64.tar.gz
            jfrm_darwin_arm64.tar.gz
            jfrm_linux_amd64.tar.gz
            jfrm_linux_arm64.tar.gz
            jfrm_windows_amd64.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew-tap:
    needs: release
    runs-on: ubuntu-latest
    if: github.repository == 'bhanurp/jfrm'
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: bhanurp/homebrew-jfrm
          token: ${{ secrets.GITHUB_TOKEN }}
          path: jfrm-tap
          
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          
      - name: Calculate SHA256 hashes and update formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Updating formula for version: $VERSION"
          
          # Create a temporary file for the updated formula
          TEMP_FILE=$(mktemp)
          
          # Process each platform and update the formula using awk
          awk -v version="$VERSION" '
          BEGIN {
              # Define platform patterns
              platforms["darwin_arm64"] = "darwin_arm64"
              platforms["darwin_amd64"] = "darwin_amd64" 
              platforms["linux_arm64"] = "linux_arm64"
              platforms["linux_amd64"] = "linux_amd64"
          }
          
          {
              line = $0
              
              # Update version
              if (line ~ /version "/) {
                  gsub(/version "[0-9.]*"/, "version \"" substr(version, 2) "\"")
              }
              
              # Check if this line contains a platform URL
              for (platform in platforms) {
                  if (line ~ platform && line ~ /url/) {
                      # Download and calculate SHA256 for this platform
                      url = "https://github.com/bhanurp/jfrm/releases/download/" version "/jfrm_" platform ".tar.gz"
                      cmd = "curl -sL \"" url "\" | shasum -a 256 | cut -d\" \" -f1"
                      cmd | getline sha256
                      close(cmd)
                      
                      print "  Processing " platform "..." > "/dev/stderr"
                      print "  URL: " url > "/dev/stderr"
                      print "  SHA256: " sha256 > "/dev/stderr"
                      
                      # Store the SHA256 for this platform
                      sha256s[platform] = sha256
                  }
              }
              
              # Update SHA256 lines for each platform
              for (platform in platforms) {
                  if (line ~ platform && line ~ /sha256/) {
                      if (sha256s[platform] != "") {
                          gsub(/sha256 "[a-f0-9]{64}"/, "sha256 \"" sha256s[platform] "\"")
                      }
                  }
              }
              
              print line
          }
          ' jfrm-tap/Formula/jfrm.rb > "$TEMP_FILE"
          
          # Replace the original file
          mv "$TEMP_FILE" jfrm-tap/Formula/jfrm.rb
          
      - name: Commit and push changes
        run: |
          cd jfrm-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/jfrm.rb
          git commit -m "Update jfrm to ${{ github.ref_name }}"
          git push origin main 